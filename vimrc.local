""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==== Usage notes
"
" closetag: <C-_>
" edit vimrc.local: <leader>ev
" Pressing ,ss will toggle and untoggle spell checking
"
" Go up/down by white line: {}
" In MacVim, you can have multiple tabs open. This mapping makes Ctrl-Tab
" switch between them, like browser tabs. Ctrl-Shift-Tab goes the other way.
"
" toggle invis chars: <leader>i
"
" split window: vv
" swap splits: <leader>r
"
" observableUser.set("name", user.name); => observableUser.name = user.name;
" s/set("\(.\+\)",\(.\+\));/\1 =\2;/
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ============ test =========================
" Disable AutoComplPop.
" let g:acp_enableAtStartup = 0
" " Use neocomplete.
" let g:neocomplete#enable_at_startup = 1
" " Use smartcase.
" let g:neocomplete#enable_smart_case = 1
" " Set minimum syntax keyword length.
" let g:neocomplete#sources#syntax#min_keyword_length = 3


" ============ Appearance ========================= {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set ttyfast "faster redraws

set cursorline "highlight current line

"colorscheme jellybeans
source ~/dotfiles/custom/jellybeans.vim
" source ~/dotfiles/custom/airline/jellybeans.vim


set hlsearch "highlight search results
set smartcase "smart case for search
" Disable highlight when <leader>. is pressed
map <silent> <leader>. :noh<cr>

set formatoptions-=o "dont continue comments when pushing o/O
set formatoptions+=qrn1 "q=formatting with gq; r=continue comments after enter; n=recognize numbered lists; 1=don't break line after one letter word

if v:version > 703 || v:version == 703 && has("patch541")
	set formatoptions+=j " j=remove comment when joining lines
endif

" For regular expressions turn magic on
set magic

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" But don't do it for git messages because that's fucking annoying
augroup gitCommitEditMsg
  autocmd!
  autocmd BufReadPost *
    \ if @% == '.git/COMMIT_EDITMSG' |
    \   exe "normal gg" |
    \ endif
augroup END

" Remember info about open buffers on close
set viminfo^=%

" Character to precede line wraps
set showbreak=↪\ 

"not sure what this does. Let's see.
set fillchars=diff:⣿,vert:│ 

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" ================= GUI setup ========================= {{{
if has('gui_running')
	" disable the GUI stuff
	set guioptions=
	set guifont=Source_Code_Pro:h13
	" In MacVim, you can have multiple tabs open. This mapping makes Ctrl-Tab
	" switch between them, like browser tabs. Ctrl-Shift-Tab goes the other way.
	noremap <C-Tab> :tabnext<CR>
	noremap <C-S-Tab> :tabprev<CR>

	" Switch to specific tab numbers with Command-number
	noremap <D-1> :tabn 1<CR>
	noremap <D-2> :tabn 2<CR>
	noremap <D-3> :tabn 3<CR>
	noremap <D-4> :tabn 4<CR>
	noremap <D-5> :tabn 5<CR>
	noremap <D-6> :tabn 6<CR>
	noremap <D-7> :tabn 7<CR>
	noremap <D-8> :tabn 8<CR>
	noremap <D-9> :tabn 9<CR>
	" Command-0 goes to the last tab
	noremap <D-0> :tablast<CR>
endif
" }}}

"
"
 let g:ycm_path_to_python_interpreter = '/usr/bin/python'

" ============ Show overlong line indicator ========================= {{{
 highlight OverLength ctermbg=238 guibg=#ff7f00

 let g:overlength_enabled = 0
 function! ToggleOverLength()
	 if g:overlength_enabled == 0
		 match OverLength /\%79v/
		 let g:overlength_enabled = 1
		 " echo 'OverLength highlighting turned on'
	 else
		 match
		 let g:overlength_enabled = 0
		 " echo 'OverLength highlighting turned off'
	 endif
 endfunction

 " call ToggleOverLength()

 nnoremap <leader>h :call ToggleOverLength()<CR>
" }}}

" ================ Statusline ========================= {{{
" from https://github.com/spf13/spf13-vim/blob/master/.vimrc
" reference: http://learnvimscriptthehardway.stevelosh.com/chapters/17.html
" " %< truncation point
" \ space
" %f relative path to file
" %m modified flag [+] (modified), [-] (unmodifiable) or nothing
" %r readonly flag [RO]
" %y filetype [ruby]
" %= split point for left and right justification
" %-14.( %) block of fixed width 14 characters
" %l current line
" %c current column
" %V current virtual column as -{num} if different from %c
" %P percentage through buffer
" set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

" if has('statusline')
"   set laststatus=2
"   " Broken down into easily includeable segments
"   " %.20f = restrict filename to 20 chars
"   set statusline=%<%.25f\ " Filename
"   set statusline+=%w%h%m%r " Options
"   set statusline+=%{fugitive#statusline()} " Git Hotness
"   set statusline+=\ [%{&ff}/%Y] " filetype
"   " set statusline+=\ [%{getcwd()}] " current dir
"   set statusline+=%#warningmsg#
"   set statusline+=%{SyntasticStatuslineFlag()}
"   set statusline+=%*
"   let g:syntastic_enable_signs=1
"   set statusline+=%=%-14.(%l,%c%V%)\ %p%% " Right aligned file nav info
" endif

"stolen from spf13
" if has('statusline')
" 	set laststatus=2

" 	" Broken down into easily includeable segments
" 	set statusline=%<%f\					 " Filename
" 	set statusline+=%w%h%m%r				 " Options
" 	set statusline+=%{fugitive#statusline()} " Git Hotness
" 	set statusline+=\ [%{&ff}/%Y]			 " Filetype
" 	set statusline+=\ [%{getcwd()}]			 " Current dir
" 	set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
" endif

" let g:airline_theme="jellybeans"
" }}}
"
" Status Line: {{{

" Status Function: {{{2
function! Status(winnr)
  let stat = ''
  let active = winnr() == a:winnr
  let buffer = winbufnr(a:winnr)

  let modified = getbufvar(buffer, '&modified')
  let readonly = getbufvar(buffer, '&ro')
  let fname = bufname(buffer)

  function! Color(active, num, content)
    if a:active
      return '%' . a:num . '*' . a:content . '%*'
    else
      return a:content
    endif
  endfunction

  " column
  let stat .= '%1*' . (col(".") / 100 >= 1 ? '%v ' : ' %2v ') . '%*'

  " file
  let stat .= Color(active, 4, active ? ' »' : ' «')
  let stat .= ' %<'

  if fname == '__Gundo__'
    let stat .= 'Gundo'
  elseif fname == '__Gundo_Preview__'
    let stat .= 'Gundo Preview'
  else
    let stat .= '%f'
  endif

  let stat .= ' ' . Color(active, 4, active ? '«' : '»')

  " file modified
  let stat .= Color(active, 2, modified ? ' +' : '')

  " read only
  let stat .= Color(active, 2, readonly ? ' ‼' : '')

  " paste
  if active && &paste
    let stat .= ' %2*' . 'P' . '%*'
  endif

  " right side
  let stat .= '%='

  " git branch
  if exists('*fugitive#head')
    let head = fugitive#head()

    if empty(head) && exists('*fugitive#detect') && !exists('b:git_dir')
      call fugitive#detect(getcwd()) 
      let head = fugitive#head()
    endif
  endif

  if !empty(head)
    let stat .= Color(active, 3, ' @') . head . ' '
  endif

  "percentage
  let stat .=" %p%%" 

  return stat
endfunction
" }}}
"
" Status AutoCMD: {{{
function! SetStatus()
  for nr in range(1, winnr('$'))
    call setwinvar(nr, '&statusline', '%!Status('.nr.')')
  endfor
endfunction

augroup status
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter,BufUnload * call SetStatus()
augroup END
" }}}

" Status Colors: {{{
hi User1 ctermfg=33 guifg=#268bd2 ctermbg=15 guibg=#262626 gui=bold
hi User2 ctermfg=125 guifg=#d33682 ctermbg=16 guibg=#403c41 gui=bold
hi User3 ctermfg=64 guifg=#719e07 ctermbg=16 guibg=#403c41 gui=bold
hi User4 ctermfg=37 guifg=#2aa198 ctermbg=16 guibg=#403c41 gui=bold

hi statusline term=bold,reverse ctermfg=231 ctermbg=16 gui=italic guifg=#ff8000 guibg=#403c41
hi StatusLinenc term=bold ctermfg=16 ctermbg=252 gui=italic guifg=#eeeeee guibg=#5b5b5b
" }}}

" StatusLine: {{{3
" Arguments: focus, byfname, s:regexp, prv, item, nxt, marked
" a:1 a:2 a:3 a:4 a:5 a:6 a:7
fu! CtrlP_main_status(...)
  let regex = a:3 ? '%#CtrlP_Violet#regex %*' : ''
  let prv = '%#CtrlP_Purple# '.a:4.' %*'
  let item = '%#CtrlP_IPurple# '.a:5.' %*'
  let nxt = '%#CtrlP_Purple# '.a:6.' %*'
  let byfname = '%#CtrlP_Violet# '.a:2.' %*'
  let dir = '%#CtrlP_Purple# '.fnamemodify(getcwd(), ':~').' %*'
  retu prv . item . nxt . '%#CtrlP_Violet#%=%*%<' . byfname . regex . dir
endf

" Argument: len
" a:1
fu! CtrlP_progress_status(...)
  let len = '%#Function# '.a:1.' %*'
  let dir = ' %=%<%#LineNr# '.getcwd().' %*'
  retu len.dir
endf

hi CtrlP_Purple ctermfg=255 guifg=#ffffff ctermbg=54 guibg=#5f5faf
hi CtrlP_IPurple ctermfg=54 guifg=#5f5faf ctermbg=255 guibg=#ffffff
hi CtrlP_Violet ctermfg=54 guifg=#5f5faf ctermbg=104 guibg=#aeaed7

let g:ctrlp_status_func = {
  \ 'main': 'CtrlP_main_status',
  \ 'prog': 'CtrlP_progress_status'
  \}
" }}}


" mode aware cursor
set gcr=a:block

set gcr+=o:hor50-Cursor
set gcr+=n:Cursor
set gcr+=i-ci-sm:InsertCursor
set gcr+=r-cr:ReplaceCursor-hor20
set gcr+=c:CommandCursor
set gcr+=v-ve:VisualCursor

set gcr+=a:blinkon0

hi InsertCursor ctermfg=15 guifg=#fdf6e3 ctermbg=37 guibg=#2aa198
hi VisualCursor ctermfg=15 guifg=#fdf6e3 ctermbg=125 guibg=#d33682
hi ReplaceCursor ctermfg=15 guifg=#fdf6e3 ctermbg=65 guibg=#dc322f
hi CommandCursor ctermfg=15 guifg=#fdf6e3 ctermbg=166 guibg=#cb4b16

" =============== Showmarks ========================= {{{
let g:showmarks_enable = 1 "always show showmarks
let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
" Ignore help, quickfix, non-modifiable buffers
let showmarks_ignore_type = "hqm"
" }}}

" ========= Invisibles ========================= {{{
" set listchars=trail:.,tab:>-,eol:$
" set listchars=tab:│┈,trail:·,extends:>,precedes:<,nbsp:&
" set listchars=trail:.,tab:>-,eol:¬
set listchars=tab:│\ ,trail:·,extends:>,precedes:<,nbsp:&
"make the listchars it a bit less noticeable
"standard: guifg=#444444 guibg=#1c1c1c 
highlight SpecialKey guifg=#2c2c2c guibg=#1a1a1a
highlight CursorLine guibg=#303030

" Toggle invisible chars
noremap <Leader>i :set list!<CR>
" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" ==== Functionality/Behaviour {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" =============== Splits ========================= {{{
" Open new split panes to right and bottom, which feels more natural than Vim's default:
set splitbelow
set splitright

nnoremap vv :vsplit<cr><C-w>l
nnoremap <leader>r <C-w>r

" Create a split on the given side.
" From http://technotales.wordpress.com/2010/04/29/vim-splits-a-guide-to-doing-exactly-what-you-want/
nmap <leader><left> :leftabove vsp<CR>
nmap <leader><right> :rightbelow vsp<CR>
nmap <leader><up> :leftabove sp<CR>
nmap <leader><down> :rightbelow sp<CR>

" resize splits with C-S-hjkl
nnoremap <D-L> :vertical resize +5<CR>
nnoremap <D-H> :vertical resize -5<CR>
nnoremap <D-K> :resize +5<CR>
nnoremap <D-J> :resize -5<CR>

" }}}


" ============== Indentation ========================= {{{
set softtabstop=4 tabstop=4 shiftwidth=4 noexpandtab " should give me tabs instead of spaces. Reformat with =
set clipboard=autoselect
set smartindent "Smart indent
set wrap "Wrap lines
" set nowrap "Don't wrap lines
set linebreak "Wrap lines at convenient points
" }}}


" ================ Persistent Undo ================== {{{
" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo')
	silent !mkdir ~/.vim/backups > /dev/null 2>&1
	set undodir=~/.vim/backups
	set undofile

	set undolevels=500 "maximum number of changes that can be undone
endif
" }}}


" ============ History ========================= {{{
set history=1000
" }}}


" ============ Completion ========================= {{{
set wildmenu "show completion menu
" set wildmode=list:longest "complete up to the point where it's ambiguous
set wildmode=longest:full,list:full "autocomplete that seems to work better, eg with cmd mode
" }}}

" ============ Spell Checking ========================= {{{
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=
" }}}


" =========== Folds ========================= {{{
set foldmethod=marker
"unfold everything on opening file
au BufRead * normal zR
set foldnestmax=3 "deepest fold is 3 levels
set nofoldenable "dont fold by default

" better foldtext from http://dhruvasagar.com/2013/03/28/vim-better-foldtext?utm_source=rss&utm_medium=rss&utm_campaign=vim-better-foldtext
function! NeatFoldText() 
	let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
	let lines_count = v:foldend - v:foldstart + 1
	let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
	let foldchar = matchstr(&fillchars, 'fold:\zs.')
	let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
	let foldtextend = lines_count_text . repeat(foldchar, 8)
	let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
	return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction

set foldtext=NeatFoldText()
" }}}

" ============ Spelling ========================= {{{
set dictionary+=/usr/share/dict/words
" set complete+=k " enable dictionary completion. This sucks because it always
" autocompletes, even in sourcecode. Dictionary completion is always available
" through <C-x><C-k>.

"highlight clear SpellBad "No funky spelling correction wriggles

" cmd+left=fold, cmd+right=unfold
nnoremap <D-left> zc
nnoremap <D-right> zo
nnoremap <Space> za
" }}}


" ============ Scrolling ========================= {{{
"up by 3 lines
" nnoremap <C-e> 3<C-e>
"down by 3 lines
" nnoremap <C-y> 3<C-y>
set scrolloff=8 "start scrolling 8 lines from the bottom
" }}}

" ========= Misc ========================= {{{

"autosave when losing focusresults
autocmd BufLeave,FocusLost * silent! wall

" Auto-reload buffers when files are changed on disk
set autoread

" No annoying sound on errors
set noerrorbells
set novisualbell
set vb t_vb=
set tm=500

" Edit vimrc with ,ev - i need it often enough to warrant this
nnoremap <leader>ev :vsplit ~/dotfiles/vimrc.local<cr>
nnoremap <leader>ez :vsplit ~/dotfiles/zshrc<cr>
" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}

" ==== Keymap Shortcuts{{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Easier colon commands
map <C-e> :
imap <C-e> <esc>:

" select previously pasted text with gp - reminder: select previously visually
" selected text is gv
nnoremap gp `[v`]

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

 " Copy to the system clipboard
map <leader>y "+y
  " Paste...
map <leader>p "+p

" remap ESC
inoremap jj <ESC>
inoremap jk <ESC>

" get out easier
nnoremap QQ :q!<cr>

" Quicker command mode
" now with c-e
" nnoremap ; :
" xnoremap ; :
" map :: to ; because i still like ;
" nnoremap :: ;
" xnoremap :: ;

" Quicker delete
" nnoremap <C-x> dd

"map F1 to esc instead of help because that's fucking annoying
map <F1> <Esc>
imap <F1> <Esc>

" map <F13><F14><F15>
nmap <F13> ciw
nmap <F14> ci"
nmap <F15> <Plug>CommentaryLine

" Expand %% to current directory
" http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>



" Remap VIM 0 to first non-blank character
map 0 ^

" Make cursor move by visual lines instead of file lines (when wrapping)
map <up> gk
map k gk
imap <up> <C-o>gk
map <down> gj
map j gj
imap <down> <C-o>gj
map E ge

" Camelcase Motion
nmap W <Plug>CamelCaseMotion_w
nmap B <Plug>CamelCaseMotion_b
nmap E <Plug>CamelCaseMotion_e

" JS beautify
map <C-=> :call JsBeautify()<cr>

" stuff
" inoremap <S-Space> <right>
inoremap <C-Space> <Esc>A;<cr>

inoremap <C-Enter> <Esc>A;<cr>

noremap <D-r> :!rake<Space>
" }}}

" ========= Tabs ========================= {{{
" Tab/shift-tab to indent/outdent in visual mode.
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" and in normal mode
nnoremap <Tab> V>
nnoremap <S-Tab> V<

" Keep selection when indenting/outdenting.
vnoremap > >gv
vnoremap < <gv

" Set <c-n> and <c-p> to act like Up/Down so will filter command history
" Practical Vim p.69
cnoremap <c-p> <up>
cnoremap <c-n> <down>

" }}}

" ========== Surround ========================= {{{
" ," Surround a word with "quotes"
map ," ysiw"
vmap ," c"<C-R>""<ESC>

" All surrounding operation now simply start with leader-s, freeing up all the
" other keys!
map <leader>s ysiw
vmap <leader>s S



" " ,' Surround) a word with 'single quotes'
" map ,' ysiw'
" vmap ,' c'<C-R>"'<ESC>

" " ,) or ,( Surround a word with (parens)
" " The difference is in whether a space is put in
" map ,( ysiw(
" map ,) ysiw)
" vmap ,( c( <C-R>" )<ESC>
" vmap ,) c(<C-R>")<ESC>

" " ,[ Surround a word with [brackets]
" map ,] ysiw]
" map ,[ ysiw[
" vmap ,[ c[ <C-R>" ]<ESC>
" vmap ,] c[<C-R>"]<ESC>

" " ,{ Surround a word with {braces}
" map ,} ysiw}
" map ,{ ysiw{
" vmap ,} c{ <C-R>" }<ESC>
" vmap ,{ c{<C-R>"}<ESC>


" Now provided by unimpaired with [p, ]p
" paste in line above
" nmap <leader>P O<Esc>p
" " and below
" nmap <leader>p o<Esc>p
" }}}

" ========================= Textmate-like keymaps ========================= {{{

" awesome, inserts new line without going into insert mode
nnoremap <S-Enter> O<ESC>0D
nnoremap <Enter> o<ESC>0D

" ctrl+enter = new line underneath in insert mode - (nearly) like textmate
imap <S-Enter> <ESC>o

" Move a line of text using ALT+[jk] or Command+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z
if has("mac") || has("macunix")
	nmap <D-j> <M-j>
	nmap <D-k> <M-k>
	vmap <D-j> <M-j>
	vmap <D-k> <M-k>
endif

" " command+/ comments/uncomments line. Just like in Textmate. Nice
" In visual mode it comments the whole block
nmap <D-/> <Plug>CommentaryLine
xmap <D-/> <Plug>Commentary
" }}}
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" => Misc {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Save a file as root.
cabbrev w!! w !sudo tee % > /dev/null<CR>:e!<CR><CR>

" Ruby stuff
" Insert HashRockets... :)
imap <C-l> <Space>=><Space>

" Alignment
map <Leader>l :Align<space>

set fileformat=unix
set fileformats=unix,dos

filetype indent on


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
" =>  Filetype mappings {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" au BufRead *.html set ft=javascript.html
"
" au BufNewFile *.html set ft=javascript.html
" au BufRead *.htm set ft=javascript.html
" au BufNewFile *.htm set ft=javascript.html
" au BufRead *.js set ft=javascript.html
" au BufNewFile *.js set ft=javascript.html
"au BufRead,BufNewFile *.{html,htm,js} set ft=html.javascript
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby

au BufRead *.htm{,l} :inoremap <control><shift><enter> <br><cr>

" always open help in vertical split
" augroup helpfiles
"   au!
"   au BufRead,BufEnter */doc/* wincmd L
" augroup END

" Open help in a vertical split instead of the default horizontal split
" http://vim.wikia.com/wiki/Replace_a_builtin_command_using_cabbrev
cabbrev h <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'vert h' : 'h')<cr>
cabbrev help <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'vert h' : 'help')<cr>


augroup javascript
	function! s:CoffeePut(startline, endline, args) 
	  let input = join(getline(a:startline, a:endline), "\n")
	  let output = system("coffee".' -scb --no-header '.' 2>&1', input)
	  let out = []
	  call add(out, "/*###")
	  call add(out, input)
	  call add(out, "###*/\n")
	  call add(out, output)
	  execute "'<, '> d"
	  put =out 
	  normal `[v`]
	endfunction

	command! -range=% -bar -nargs=* CoffeePut :silent call s:CoffeePut(<line1>, <line2>, <q-args>)
augroup END
" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => ShowMarks {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:showmarks_enable = 1 "always show showmarks
let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
" Ignore help, quickfix, non-modifiable buffers
let showmarks_ignore_type = "hqm"
" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin Settings {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ============ Necessary for closetag ========================= 
" if !exists("b:unaryTagsStack") || exists("b:closetag_html_style")
"	  if &filetype == "html" || exists("b:closetag_html_style")
"		  let b:unaryTagsStacktack="area base br dd dt hr img input link meta param"
"	  else " for xml and xsl
"		  let b:unaryTagsStack=""
"	  endif
" endif

" if !exists("b:unaryTagsStack")
"	  let b:unaryTagsStack=""
" endif

" ============ Fugitive =========================
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gl :Glog<cr>
nnoremap <leader>gp :Git push<cr>
" nnoremap <leader>gs :Git status -sb<cr>


" ============ Gundo ========================= {{{
let g:gundo_preview_bottom=1
nnoremap <leader>u :GundoToggle<CR>
" }}}


" ============ snippets ========================= {{{
let g:snippets_dir="$HOME/dotfiles/vim-snippets/"
" }}}

" ============ syntastic ========================= {{{
let g:syntastic_check_on_open=1
let g:syntastic_javascript_checkers = ['jshint']
" }}}

" ============ Easytags =========================
" if there already is a tags file, use that one
let g:easytags_dynamic_files = 1

command! Marked silent !open -a "Marked.app" "%:p"

" call ToggleOverLength() "show the overlength indicator. No idea why I have to put it here..
